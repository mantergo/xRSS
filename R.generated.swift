//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 12 images.
  struct image {
    /// Image `CITYDOG.BY`.
    static let citydogbY = Rswift.ImageResource(bundle: R.hostingBundle, name: "CITYDOG.BY")
    /// Image `DEV.BY`.
    static let devbY = Rswift.ImageResource(bundle: R.hostingBundle, name: "DEV.BY")
    /// Image `MEDUZA.IO`.
    static let meduzaiO = Rswift.ImageResource(bundle: R.hostingBundle, name: "MEDUZA.IO")
    /// Image `ONLINER.BY`.
    static let onlinerbY = Rswift.ImageResource(bundle: R.hostingBundle, name: "ONLINER.BY")
    /// Image `SVABODA.ORG`.
    static let svabodaorG = Rswift.ImageResource(bundle: R.hostingBundle, name: "SVABODA.ORG")
    /// Image `TUT.BY`.
    static let tutbY = Rswift.ImageResource(bundle: R.hostingBundle, name: "TUT.BY")
    /// Image `facebook`.
    static let facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebook")
    /// Image `favEmpty2`.
    static let favEmpty2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "favEmpty2")
    /// Image `favEmpty`.
    static let favEmpty = Rswift.ImageResource(bundle: R.hostingBundle, name: "favEmpty")
    /// Image `favFilled`.
    static let favFilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "favFilled")
    /// Image `placeholder`.
    static let placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder")
    /// Image `twitter`.
    static let twitter = Rswift.ImageResource(bundle: R.hostingBundle, name: "twitter")
    
    /// `UIImage(named: "CITYDOG.BY", bundle: ..., traitCollection: ...)`
    static func citydogbY(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.citydogbY, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "DEV.BY", bundle: ..., traitCollection: ...)`
    static func devbY(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.devbY, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MEDUZA.IO", bundle: ..., traitCollection: ...)`
    static func meduzaiO(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meduzaiO, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ONLINER.BY", bundle: ..., traitCollection: ...)`
    static func onlinerbY(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onlinerbY, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SVABODA.ORG", bundle: ..., traitCollection: ...)`
    static func svabodaorG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.svabodaorG, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TUT.BY", bundle: ..., traitCollection: ...)`
    static func tutbY(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutbY, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "facebook", bundle: ..., traitCollection: ...)`
    static func facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebook, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "favEmpty", bundle: ..., traitCollection: ...)`
    static func favEmpty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favEmpty, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "favEmpty2", bundle: ..., traitCollection: ...)`
    static func favEmpty2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favEmpty2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "favFilled", bundle: ..., traitCollection: ...)`
    static func favFilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favFilled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "placeholder", bundle: ..., traitCollection: ...)`
    static func placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "twitter", bundle: ..., traitCollection: ...)`
    static func twitter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.twitter, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `feedItemCell`.
    static let feedItemCell: Rswift.ReuseIdentifier<FeedCell> = Rswift.ReuseIdentifier(identifier: "feedItemCell")
    /// Reuse identifier `listItemCell`.
    static let listItemCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "listItemCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ListViewController
      
      let bundle = R.hostingBundle
      let detailFeedVC = StoryboardViewControllerResource<DetailFeedViewController>(identifier: "DetailFeedVC")
      let feedListVC = StoryboardViewControllerResource<FeedListViewController>(identifier: "FeedListVC")
      let listVC = StoryboardViewControllerResource<ListViewController>(identifier: "ListVC")
      let name = "Main"
      
      func detailFeedVC(_: Void = ()) -> DetailFeedViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: detailFeedVC)
      }
      
      func feedListVC(_: Void = ()) -> FeedListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: feedListVC)
      }
      
      func listVC(_: Void = ()) -> ListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: listVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "facebook") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'facebook' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "twitter") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'twitter' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "favEmpty2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'favEmpty2' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().listVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'listVC' could not be loaded from storyboard 'Main' as 'ListViewController'.") }
        if _R.storyboard.main().feedListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'feedListVC' could not be loaded from storyboard 'Main' as 'FeedListViewController'.") }
        if _R.storyboard.main().detailFeedVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'detailFeedVC' could not be loaded from storyboard 'Main' as 'DetailFeedViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
